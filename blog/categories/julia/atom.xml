<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Julia | Bioinformatics in Julia]]></title>
  <link href="http://phrodod.github.io/blog/categories/julia/atom.xml" rel="self"/>
  <link href="http://phrodod.github.io/"/>
  <updated>2014-09-21T23:15:17-07:00</updated>
  <id>http://phrodod.github.io/</id>
  <author>
    <name><![CDATA[Phillip David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Blocks in Julia]]></title>
    <link href="http://phrodod.github.io/blog/2014/09/21/using-blocks-in-julia/"/>
    <updated>2014-09-21T11:52:44-07:00</updated>
    <id>http://phrodod.github.io/blog/2014/09/21/using-blocks-in-julia</id>
    <content type="html"><![CDATA[<p>Blocks, like lambdas, are a way of defining anonymous functions in Julia. This
post details how to write code that uses blocks. Let&rsquo;s start with a canonical
Julia example:</p>

<pre><code class="jlcon Canonical example using map">julia&gt; f(x) = 2x
f (generic function with 1 method)

julia&gt; map(f, [2,4,6,8])
4-element Array{Int64,1}:
  4
  8
 12
 16
</code></pre>

<p>In this example, I pass a function to the map function, which applies the
function supplied as the first argument to each element of the array passed as
the second argument. Here, the function simply doubles the values.</p>

<p>I can do this more simply by using a lambda here:
<code>jlcon Canonical lambda example using map
julia&gt; map(x -&gt; 2x, [2,4,6,8])
4-element Array{Int64,1}:
  4
  8
 12
 16
</code></p>

<p>Here, the function is simply defined in-line. For a simple function, this is
fine. But if the function gets more complicated, the lambda form would
hide the connection between the array and the map call. Traditionally, that&rsquo;s
when you&rsquo;d create a separate function. But with Julia, we have another option.
The block allows you to provide the function between a <code>do</code> and an <code>end</code>
following the call to map. It looks like this:
<code>jlcon Canonical block example using map
julia&gt; map([2,4,6,8]) do x
    2x
end
4-element Array{Int64,1}:
  4
  8
 12
 16
</code></p>

<p>Notice that in this example, the call to map looks like it only takes one
argument. But the block following the function call provides the function that
gets passed as the first argument. Note that the argument to the block gets
defined on the same line as the do statement, but the remaining portion of the
block goes on following lines until you reach the <code>end</code> statement.</p>

<pre><code class="julia Using a block to write file contents">open("myfile.dat","w") do f
   write(f,"hello world")
end
</code></pre>

<p>In this example, I open a file. Normally, this returns a file handle, which I
have to keep track of. I write data using the file handle, and when I&rsquo;m all
done, I have to remember to close the file.</p>

<p>When I use a block, though, I write the code that handles the open file
between a <code>do</code> and <code>end</code> pair, using as variables to this code anything after
the <code>do</code>.</p>

<p>In this case, my local variable within the <code>do</code> block is <code>f</code>, the file handle.
I then write some data to it. I don&rsquo;t need to worry about closing the file
when I&rsquo;m done, because I&rsquo;m using a special form of the open statment.</p>
]]></content>
  </entry>
  
</feed>
